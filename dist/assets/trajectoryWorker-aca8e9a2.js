(function(){"use strict";const u=6.674*Math.pow(10,-11);class x{constructor(){}calculateGravitationalForce(t,c){const{distance:e,distanceX:a,distanceY:s}=this.calculateDistance(t.position,c.position),o=u*t.mass*c.mass/e**2,n={x:a/e,y:s/e};return{x:n.x*o,y:n.y*o}}calculateDistance(t,c){const e=c.x-t.x,a=c.y-t.y;return{distance:Math.sqrt(e**2+a**2),distanceX:e,distanceY:a}}calculateVelocity({acceleration:t,initialVelocity:c,timeStep:e}){return{x:c.x+=t.x*e,y:c.y+=t.y*e}}calculateAcceleration({force:t,mass:c}){return{x:t.x/c,y:t.y/c}}calculatePosition({position:t,velocity:c,timeStep:e}){return{x:t.x+c.x*e,y:t.y+c.y*e}}advanceTimeStep({ship:t,otherBodies:c,thrustForce:e,timeStep:a,callback:s}){const o=this.sumForces(c,t);o.x+=e.x,o.y+=e.y;const n=this.calculateAcceleration({force:o,mass:t.mass}),i=this.calculateVelocity({acceleration:n,initialVelocity:t.velocity,timeStep:a}),r=this.calculatePosition({position:t.position,velocity:i,timeStep:a});s({newPosition:r,newAcceleration:n,newVelocity:i})}sumForces(t=[],c){return t.reduce((e,a)=>{const s=this.calculateGravitationalForce(c,a);return{x:e.x+s.x,y:e.y+s.y}},{x:0,y:0})}calculateTrajectory(t,c,e,a){const[s,o]=e;let n=[],i={...t};for(let r=s;r<=o;r+=a)this.advanceTimeStep({ship:i,thrustForce:{x:0,y:0},otherBodies:c,timeStep:a,callback:({newPosition:y,newVelocity:h,newAcceleration:v})=>{n.push(y),i.position=y,i.velocity=h,i.acceleration=v}});return n}}const d=new x;self.addEventListener("message",l=>{const{otherBodies:t,window:c,shipData:e,timeStep:a}=l.data,{acceleration:s,position:o,mass:n,velocity:i}=e,r=d.calculateTrajectory({position:o,acceleration:s,velocity:i,mass:n},t,c,a);postMessage(r)})})();
